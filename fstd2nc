#!/usr/bin/env python

###############################################################################
# Copyright 2017 - Climate Research Division
#                  Environment and Climate Change Canada
#
# This file is part of the "PyGeode-RPN" package.
#
# "PyGeode-RPN" is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# "PyGeode-RPN" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with "PyGeode-RPN".  If not, see <http://www.gnu.org/licenses/>.
###############################################################################


# Disable X-windows stuff, so this script will work on headless machines.
try:
  import matplotlib
  matplotlib.use('Agg')
except ImportError: pass

from sys import argv, exit, stdout
from os.path import exists
from pygeode.formats import netcdf, fstd
from pygeode.dataset import asdataset
from argparse import ArgumentParser

# Extract keyword options
parser = ArgumentParser(description="Converts an RPN standard file (FSTD) to netCDF format.")
parser.add_argument('rpnfile', metavar='<fstd_file>', help='The FSTD file to convert.')
parser.add_argument('ncfile', metavar='<netcdf_file>', help='The name of the netCDF file to create.')
parser.add_argument('--vars', metavar='VAR1,VAR2,...', help='Comma-seperated list of variables to convert.  By default, all variables are converted.')
parser.add_argument('--squash-forecasts', action='store_true', help='Use the date of validity for the "time" axis.  Otherwise, the default is to use the date of original analysis, and the forecast length goes in a "forecast" axis.')
parser.add_argument('--time-units', choices=['seconds','minutes','hours','days'], default='seconds', help='The units for the time axis for the output file.')
parser.add_argument('--nc-version', type=int, choices=[3,4], default=3, help='The version of netCDF format to use.  Default is %(default)s.')
args = parser.parse_args()

if args.vars is not None:
  selected_vars = args.vars.split(',')
  print 'Looking for variables:', ' '.join(selected_vars)
else:
  selected_vars = None


# Make sure input file exists
if not exists(args.rpnfile):
  print "Error: '%s' does not exist!"%(args.rpnfile)
  exit(1)

# Check if output file already exists
if exists(args.ncfile):
  overwrite = False
  if stdout.isatty():
    while True:
      print "Warning: '%s' already exists!  Overwrite? (y/n):"%(args.ncfile),
      ans = raw_input()
      if ans.lower() in ('y','yes'):
        overwrite = True
        break
      if ans.lower() in ('n','no'):
        overwrite = False
        break
      print "Sorry, invalid response."
  if overwrite is False:
    print "Refusing to overwrite existing file '%s'."%(args.ncfile)
    exit(1)


# Load the input file
data = fstd.open(args.rpnfile, squash_forecasts=args.squash_forecasts, raw_list=True)

# Subset the variables
if selected_vars is not None:
  all_data = data
  data = [d for d in all_data if d.name in selected_vars]
  # Attach any related lat/lon fields.
  for d in all_data:
    if d.name in ('lat','lon') and d.hasaxis('xaxis') and d.hasaxis('yaxis'):
      if any(v.hasaxis(d.xaxis) and v.hasaxis(d.yaxis) for v in data):
        data.append(d)

print "Found variables:", ' '.join(d.name for d in data)

# Modify the time axis to have the appropriate units.
def fix_time (var):
  if not var.hasaxis('time'): return var
  new_time = type(var.time)(units=args.time_units, startdate=var.time.startdate, **var.time.auxarrays)
  return var.replace_axes(time=new_time)
data = map(fix_time,data)

# Put the command-line invocation into the output file metadata
data  = asdataset(data)
from datetime import datetime
datestr = datetime.today().strftime('%c')
full_command = ' '.join(argv)
data.atts['history'] = datestr + ': ' + full_command


# Write to netcdf
netcdf.save(args.ncfile, data, version=args.nc_version)

