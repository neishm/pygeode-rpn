#!/usr/bin/env python

###############################################################################
# Copyright 2017 - Climate Research Division
#                  Environment and Climate Change Canada
#
# This file is part of the "PyGeode-RPN" package.
#
# "PyGeode-RPN" is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# "PyGeode-RPN" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with "PyGeode-RPN".  If not, see <http://www.gnu.org/licenses/>.
###############################################################################


# Disable X-windows stuff, so this script will work on headless machines.
try:
  import matplotlib
  matplotlib.use('Agg')
except ImportError: pass

from sys import argv, exit, stdout
from os.path import exists
from pygeode.formats import netcdf, fstd
from pygeode.dataset import asdataset
from argparse import ArgumentParser, FileType

# Extract keyword options
parser = ArgumentParser(description="Converts an RPN standard file (FSTD) to netCDF format.")
parser.add_argument('rpnfile', metavar='<fstd_file>', help='The FSTD file to convert.')
parser.add_argument('ncfile', metavar='<netcdf_file>', help='The name of the netCDF file to create.')
parser.add_argument('--vars', metavar='VAR1,VAR2,...', help='Comma-seperated list of variables to convert.  By default, all variables are converted.')
parser.add_argument('--squash-forecasts', action='store_true', help='Use the date of validity for the "time" axis.  Otherwise, the default is to use the date of original analysis, and the forecast length goes in a "forecast" axis.')
parser.add_argument('--ignore-etiket', action='store_true', help='Tells the converter to ignore the etiket when deciding if two records are part of the same field.  Default is to split the variable on different etikets.')
parser.add_argument('--time-units', choices=['seconds','minutes','hours','days'], default='seconds', help='The units for the time axis for the output file.')
parser.add_argument('--nc-version', type=int, choices=[3,4], default=3, help='The version of netCDF format to use.  Default is %(default)s.')
parser.add_argument('--metadata-file', type=FileType('r'), action='append', help='Apply netCDF metadata from the specified file.')
parser.add_argument('--backend', choices=['pygeode','rpnpy'], default='pygeode', help='Which backend to use for converting the file.  Different backends may use different conventions for the netCDF metadata.  Default is %(default)s.')
args = parser.parse_args()

# Check if the rpnpy backend is requested, and if so, pass control to that
# converter.
if args.backend == 'rpnpy':
  # Pass control to other converter.
  import fstd2nc
  fstd2nc._fstd2nc_cmdline()
  quit()


if args.vars is not None:
  selected_vars = args.vars.split(',')
  print('Looking for variables:', ' '.join(selected_vars))
else:
  selected_vars = None

# Read metadata from a file?
from collections import OrderedDict
try:
  import configparser
except ImportError:
  # Python 2
  import ConfigParser as configparser

if args.metadata_file is None:
  metafiles = []
else:
  metafiles = args.metadata_file
metadata = OrderedDict()
configparser = configparser.SafeConfigParser()
for metafile in metafiles:
  configparser.readfp(metafile)
for varname in configparser.sections():
  metadata[varname] = OrderedDict(configparser.items(varname))


# Make sure input file exists
if not exists(args.rpnfile):
  print("Error: '%s' does not exist!"%(args.rpnfile))
  exit(1)

# Check if output file already exists
if exists(args.ncfile):
  overwrite = False
  if stdout.isatty():
    while True:
      print("Warning: '%s' already exists!  Overwrite? (y/n):"%(args.ncfile), end=' ')
      ans = input()
      if ans.lower() in ('y','yes'):
        overwrite = True
        break
      if ans.lower() in ('n','no'):
        overwrite = False
        break
      print("Sorry, invalid response.")
  if overwrite is False:
    print("Refusing to overwrite existing file '%s'."%(args.ncfile))
    exit(1)


# Load the input file
data = fstd.open(args.rpnfile, squash_forecasts=args.squash_forecasts, raw_list=True, ignore_etiket=args.ignore_etiket)

# Subset the variables
if selected_vars is not None:
  all_data = data
  data = [d for d in all_data if d.name in selected_vars]
  # Attach any related lat/lon fields.
  for d in all_data:
    if d.name in ('lat','lon') and d.hasaxis('xaxis') and d.hasaxis('yaxis'):
      if any(v.hasaxis(d.xaxis) and v.hasaxis(d.yaxis) for v in data):
        data.append(d)

print("Found variables:", ' '.join(d.name for d in data))

# Apply the metadata from file?
for d in data:
  if d.name in metadata:
    d.atts.update(metadata[d.name])

# Modify the time axis to have the appropriate units.
def fix_time (var):
  if not var.hasaxis('time'): return var
  new_time = type(var.time)(units=args.time_units, startdate=var.time.startdate, **var.time.auxarrays)
  return var.replace_axes(time=new_time)
data = list(map(fix_time,data))

# Put the command-line invocation into the output file metadata
data  = asdataset(data)
from datetime import datetime
datestr = datetime.today().strftime('%c')
full_command = ' '.join(argv)
data.atts['history'] = datestr + ': ' + full_command


# Write to netcdf
netcdf.save(args.ncfile, data, version=args.nc_version)

